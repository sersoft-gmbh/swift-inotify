{"schemaVersion":{"minor":1,"major":0,"patch":2},"interfaceLanguages":{"swift":[{"title":"Documentation","path":"\/documentation","children":[{"title":"Inotify","path":"\/documentation\/inotify","type":"module","children":[{"title":"Classes","type":"groupMarker"},{"children":[{"type":"groupMarker","title":"Structures"},{"path":"\/documentation\/inotify\/inotifier\/pathevents","type":"struct","title":"Inotifier.PathEvents","children":[{"title":"Structures","type":"groupMarker"},{"title":"Inotifier.PathEvents.AsyncIterator","children":[{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/next()","type":"method","title":"func next() async -> Inotifier.PathEvents.AsyncIterator.Element?"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/next(isolation:)","type":"method","title":"func next(isolation: isolated (any Actor)?) async throws(Inotifier.PathEvents.AsyncIterator.Failure) -> InotifyEvent?"},{"type":"groupMarker","title":"Type Aliases"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/element","type":"typealias","title":"Inotifier.PathEvents.AsyncIterator.Element"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/failure","type":"typealias","title":"Inotifier.PathEvents.AsyncIterator.Failure"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/asynciteratorprotocol-implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/next()-5b2qi","type":"method","title":"func next() async throws(Self.Failure) -> Self.Element?"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/next(isolation:)-5ul2y","type":"method","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?"}],"title":"AsyncIteratorProtocol Implementations"}],"type":"struct","path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func makeAsyncIterator() -> Inotifier.PathEvents.AsyncIterator","type":"method","path":"\/documentation\/inotify\/inotifier\/pathevents\/makeasynciterator()"},{"title":"Type Aliases","type":"groupMarker"},{"title":"Inotifier.PathEvents.Element","type":"typealias","path":"\/documentation\/inotify\/inotifier\/pathevents\/element"},{"title":"Inotifier.PathEvents.Failure","type":"typealias","path":"\/documentation\/inotify\/inotifier\/pathevents\/failure"},{"title":"Default Implementations","type":"groupMarker"},{"title":"AsyncSequence Implementations","children":[{"title":"Instance Methods","type":"groupMarker"},{"title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","path":"\/documentation\/inotify\/inotifier\/pathevents\/allsatisfy(_:)","type":"method"},{"title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","path":"\/documentation\/inotify\/inotifier\/pathevents\/compactmap(_:)-4eet9","type":"method"},{"title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","path":"\/documentation\/inotify\/inotifier\/pathevents\/compactmap(_:)-90jb0","type":"method"},{"title":"func contains(Self.Element) async rethrows -> Bool","path":"\/documentation\/inotify\/inotifier\/pathevents\/contains(_:)","type":"method"},{"title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","path":"\/documentation\/inotify\/inotifier\/pathevents\/contains(where:)","type":"method"},{"title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","path":"\/documentation\/inotify\/inotifier\/pathevents\/drop(while:)","type":"method"},{"title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","path":"\/documentation\/inotify\/inotifier\/pathevents\/dropfirst(_:)","type":"method"},{"title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","path":"\/documentation\/inotify\/inotifier\/pathevents\/filter(_:)","type":"method"},{"title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","path":"\/documentation\/inotify\/inotifier\/pathevents\/first(where:)","type":"method"},{"title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","path":"\/documentation\/inotify\/inotifier\/pathevents\/flatmap(_:)-5l5k4","type":"method"},{"title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","path":"\/documentation\/inotify\/inotifier\/pathevents\/flatmap(_:)-5sgti","type":"method"},{"title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","path":"\/documentation\/inotify\/inotifier\/pathevents\/flatmap(_:)-71xi2","type":"method"},{"title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","path":"\/documentation\/inotify\/inotifier\/pathevents\/flatmap(_:)-7kg5e","type":"method"},{"title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","path":"\/documentation\/inotify\/inotifier\/pathevents\/map(_:)-13sxo","type":"method"},{"title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","path":"\/documentation\/inotify\/inotifier\/pathevents\/map(_:)-3h3e","type":"method"},{"title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","path":"\/documentation\/inotify\/inotifier\/pathevents\/max(by:)","type":"method"},{"title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","path":"\/documentation\/inotify\/inotifier\/pathevents\/min(by:)","type":"method"},{"title":"func prefix(Int) -> AsyncPrefixSequence<Self>","path":"\/documentation\/inotify\/inotifier\/pathevents\/prefix(_:)","type":"method"},{"title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","path":"\/documentation\/inotify\/inotifier\/pathevents\/prefix(while:)","type":"method"},{"title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","path":"\/documentation\/inotify\/inotifier\/pathevents\/reduce(_:_:)","type":"method"},{"title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","path":"\/documentation\/inotify\/inotifier\/pathevents\/reduce(into:_:)","type":"method"}],"type":"symbol","path":"\/documentation\/inotify\/inotifier\/pathevents\/asyncsequence-implementations"}]},{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/inotify\/inotifier\/init()","type":"init","title":"init() throws"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/inotify\/inotifier\/close()","type":"method","title":"func close() throws"},{"path":"\/documentation\/inotify\/inotifier\/events(for:)","type":"method","title":"func events(for: FilePath) throws -> Inotifier.PathEvents"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/inotify\/inotifier\/actor-implementations","type":"symbol","title":"Actor Implementations","children":[{"title":"Instance Methods","type":"groupMarker"},{"title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method","path":"\/documentation\/inotify\/inotifier\/assertisolated(_:file:line:)"},{"title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method","path":"\/documentation\/inotify\/inotifier\/assumeisolated(_:file:line:)"},{"title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method","path":"\/documentation\/inotify\/inotifier\/preconditionisolated(_:file:line:)"}]}],"title":"Inotifier","type":"class","path":"\/documentation\/inotify\/inotifier"},{"title":"Structures","type":"groupMarker"},{"children":[{"type":"groupMarker","title":"Structures"},{"children":[{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/init(rawvalue:)","type":"init","title":"init(rawValue: InotifyEvent.Flags.RawValue)"},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/rawvalue-swift.property","type":"property","title":"let rawValue: InotifyEvent.Flags.RawValue"},{"type":"groupMarker","title":"Type Aliases"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/rawvalue-swift.typealias","type":"typealias","title":"InotifyEvent.Flags.RawValue"},{"type":"groupMarker","title":"Type Properties"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/accessed","type":"property","title":"static let accessed: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/attributeschanged","type":"property","title":"static let attributesChanged: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/filecreated","type":"property","title":"static let fileCreated: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/filedeleted","type":"property","title":"static let fileDeleted: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/isdirectory","type":"property","title":"static let isDirectory: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/modified","type":"property","title":"static let modified: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/movedfrom","type":"property","title":"static let movedFrom: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/movedto","type":"property","title":"static let movedTo: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/nonwritablefileclosed","type":"property","title":"static let nonWritableFileClosed: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/opened","type":"property","title":"static let opened: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/selfdeleted","type":"property","title":"static let selfDeleted: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/selfmoved","type":"property","title":"static let selfMoved: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/writablefileclosed","type":"property","title":"static let writableFileClosed: InotifyEvent.Flags"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/equatable-implementations","type":"symbol","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/!=(_:_:)","type":"op"}],"title":"Equatable Implementations"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/optionset-implementations","type":"symbol","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init()","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func contains(Self) -> Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/contains(_:)","type":"method"},{"title":"func formIntersection(Self)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/formintersection(_:)","type":"method"},{"title":"func formSymmetricDifference(Self)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/formsymmetricdifference(_:)","type":"method"},{"title":"func formUnion(Self)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/formunion(_:)","type":"method"},{"title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/insert(_:)","type":"method"},{"title":"func intersection(Self) -> Self","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/intersection(_:)","type":"method"},{"title":"func remove(Self.Element) -> Self.Element?","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/remove(_:)","type":"method"},{"title":"func symmetricDifference(Self) -> Self","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/symmetricdifference(_:)","type":"method"},{"title":"func union(Self) -> Self","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/union(_:)","type":"method"},{"title":"func update(with: Self.Element) -> Self.Element?","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/update(with:)","type":"method"}],"title":"OptionSet Implementations"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/rawrepresentable-implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var hashValue: Int","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/hashvalue"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func hash(into: inout Hasher)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/hash(into:)"}],"title":"RawRepresentable Implementations"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/setalgebra-implementations","type":"symbol","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init<S>(S)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/init(_:)","type":"init"},{"title":"init(arrayLiteral: Self.Element...)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/init(arrayliteral:)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var isEmpty: Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/isempty","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func isDisjoint(with: Self) -> Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/isdisjoint(with:)","type":"method"},{"title":"func isStrictSubset(of: Self) -> Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/isstrictsubset(of:)","type":"method"},{"title":"func isStrictSuperset(of: Self) -> Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/isstrictsuperset(of:)","type":"method"},{"title":"func isSubset(of: Self) -> Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/issubset(of:)","type":"method"},{"title":"func isSuperset(of: Self) -> Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/issuperset(of:)","type":"method"},{"title":"func subtract(Self)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/subtract(_:)","type":"method"},{"title":"func subtracting(Self) -> Self","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/subtracting(_:)","type":"method"}],"title":"SetAlgebra Implementations"}],"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct","type":"struct","title":"InotifyEvent.Flags"},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.property","type":"property","title":"let flags: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/path","type":"property","title":"let path: FilePath?"},{"type":"groupMarker","title":"Default Implementations"},{"children":[{"type":"groupMarker","title":"Operators"},{"type":"op","path":"\/documentation\/inotify\/inotifyevent\/!=(_:_:)","title":"static func != (Self, Self) -> Bool"}],"path":"\/documentation\/inotify\/inotifyevent\/equatable-implementations","type":"symbol","title":"Equatable Implementations"}],"title":"InotifyEvent","type":"struct","path":"\/documentation\/inotify\/inotifyevent"}]}],"type":"module"}]},"includedArchiveIdentifiers":["Inotify"]}