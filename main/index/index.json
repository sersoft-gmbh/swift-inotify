{"schemaVersion":{"minor":1,"major":0,"patch":2},"interfaceLanguages":{"swift":[{"type":"module","title":"Documentation","children":[{"children":[{"title":"Classes","type":"groupMarker"},{"path":"\/documentation\/inotify\/inotifier","title":"Inotifier","children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/inotify\/inotifier\/pathevents","title":"Inotifier.PathEvents","type":"struct","children":[{"type":"groupMarker","title":"Structures"},{"children":[{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func next() async -> Inotifier.PathEvents.AsyncIterator.Element?","path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/next()"},{"type":"method","title":"func next(isolation: isolated (any Actor)?) async throws(Inotifier.PathEvents.AsyncIterator.Failure) -> InotifyEvent?","path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/next(isolation:)"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","title":"Inotifier.PathEvents.AsyncIterator.Element","path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/element"},{"type":"typealias","title":"Inotifier.PathEvents.AsyncIterator.Failure","path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/failure"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","title":"AsyncIteratorProtocol Implementations","path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/asynciteratorprotocol-implementations","children":[{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/next()-5b2qi","type":"method","title":"func next() async throws(Self.Failure) -> Self.Element?"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator\/next(isolation:)-5ul2y","type":"method","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?"}]}],"type":"struct","title":"Inotifier.PathEvents.AsyncIterator","path":"\/documentation\/inotify\/inotifier\/pathevents\/asynciterator"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func makeAsyncIterator() -> Inotifier.PathEvents.AsyncIterator","path":"\/documentation\/inotify\/inotifier\/pathevents\/makeasynciterator()"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","title":"Inotifier.PathEvents.Element","path":"\/documentation\/inotify\/inotifier\/pathevents\/element"},{"type":"typealias","title":"Inotifier.PathEvents.Failure","path":"\/documentation\/inotify\/inotifier\/pathevents\/failure"},{"type":"groupMarker","title":"Default Implementations"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/compactmap(_:)-4eet9","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/compactmap(_:)-90jb0","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/flatmap(_:)-5l5k4","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/flatmap(_:)-5sgti","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/flatmap(_:)-71xi2","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/flatmap(_:)-7kg5e","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/map(_:)-13sxo","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/map(_:)-3h3e","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/pathevents\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"type":"symbol","title":"AsyncSequence Implementations","path":"\/documentation\/inotify\/inotifier\/pathevents\/asyncsequence-implementations"}]},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/inotify\/inotifier\/init()","title":"init() throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/inotify\/inotifier\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/inotify\/inotifier\/events(for:)","title":"func events(for: FilePath) throws -> Inotifier.PathEvents","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"path":"\/documentation\/inotify\/inotifier\/actor-implementations","title":"Actor Implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Methods"},{"type":"method","path":"\/documentation\/inotify\/inotifier\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)"},{"type":"method","path":"\/documentation\/inotify\/inotifier\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T"},{"type":"method","path":"\/documentation\/inotify\/inotifier\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)"}]}],"type":"class"},{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/inotify\/inotifyevent","title":"InotifyEvent","children":[{"title":"Structures","type":"groupMarker"},{"title":"InotifyEvent.Flags","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct","type":"struct","children":[{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/init(rawvalue:)","type":"init","title":"init(rawValue: InotifyEvent.Flags.RawValue)"},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/rawvalue-swift.property","type":"property","title":"let rawValue: InotifyEvent.Flags.RawValue"},{"type":"groupMarker","title":"Type Aliases"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/rawvalue-swift.typealias","type":"typealias","title":"InotifyEvent.Flags.RawValue"},{"type":"groupMarker","title":"Type Properties"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/accessed","type":"property","title":"static let accessed: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/attributeschanged","type":"property","title":"static let attributesChanged: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/filecreated","type":"property","title":"static let fileCreated: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/filedeleted","type":"property","title":"static let fileDeleted: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/isdirectory","type":"property","title":"static let isDirectory: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/modified","type":"property","title":"static let modified: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/movedfrom","type":"property","title":"static let movedFrom: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/movedto","type":"property","title":"static let movedTo: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/nonwritablefileclosed","type":"property","title":"static let nonWritableFileClosed: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/opened","type":"property","title":"static let opened: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/selfdeleted","type":"property","title":"static let selfDeleted: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/selfmoved","type":"property","title":"static let selfMoved: InotifyEvent.Flags"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/writablefileclosed","type":"property","title":"static let writableFileClosed: InotifyEvent.Flags"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/equatable-implementations","type":"symbol","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/!=(_:_:)","type":"op","title":"static func != (Self, Self) -> Bool"}],"title":"Equatable Implementations"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/optionset-implementations","type":"symbol","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init()","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/init()"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func contains(Self) -> Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/contains(_:)"},{"type":"method","title":"func formIntersection(Self)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/formintersection(_:)"},{"type":"method","title":"func formSymmetricDifference(Self)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/formsymmetricdifference(_:)"},{"type":"method","title":"func formUnion(Self)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/formunion(_:)"},{"type":"method","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/insert(_:)"},{"type":"method","title":"func intersection(Self) -> Self","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/intersection(_:)"},{"type":"method","title":"func remove(Self.Element) -> Self.Element?","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/remove(_:)"},{"type":"method","title":"func symmetricDifference(Self) -> Self","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/symmetricdifference(_:)"},{"type":"method","title":"func union(Self) -> Self","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/union(_:)"},{"type":"method","title":"func update(with: Self.Element) -> Self.Element?","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/update(with:)"}],"title":"OptionSet Implementations"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/rawrepresentable-implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/hashvalue","type":"property","title":"var hashValue: Int"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/hash(into:)","type":"method","title":"func hash(into: inout Hasher)"}],"title":"RawRepresentable Implementations"},{"path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/setalgebra-implementations","type":"symbol","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init<S>(S)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/init(_:)"},{"type":"init","title":"init(arrayLiteral: Self.Element...)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/init(arrayliteral:)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var isEmpty: Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/isempty"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","title":"func isDisjoint(with: Self) -> Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/isdisjoint(with:)"},{"type":"method","title":"func isStrictSubset(of: Self) -> Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/isstrictsubset(of:)"},{"type":"method","title":"func isStrictSuperset(of: Self) -> Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/isstrictsuperset(of:)"},{"type":"method","title":"func isSubset(of: Self) -> Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/issubset(of:)"},{"type":"method","title":"func isSuperset(of: Self) -> Bool","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/issuperset(of:)"},{"type":"method","title":"func subtract(Self)","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/subtract(_:)"},{"type":"method","title":"func subtracting(Self) -> Self","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.struct\/subtracting(_:)"}],"title":"SetAlgebra Implementations"}]},{"title":"Instance Properties","type":"groupMarker"},{"title":"let flags: InotifyEvent.Flags","path":"\/documentation\/inotify\/inotifyevent\/flags-swift.property","type":"property"},{"title":"let path: FilePath?","path":"\/documentation\/inotify\/inotifyevent\/path","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"title":"Equatable Implementations","path":"\/documentation\/inotify\/inotifyevent\/equatable-implementations","type":"symbol","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/inotify\/inotifyevent\/!=(_:_:)","type":"op","title":"static func != (Self, Self) -> Bool"}]}],"type":"struct"}],"title":"Inotify","type":"module","path":"\/documentation\/inotify"}],"path":"\/documentation"}]},"includedArchiveIdentifiers":["Inotify"]}